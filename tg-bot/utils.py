from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from db_interactor import JsonLoader

json_loader = JsonLoader()


def generatePaintingSelectionTextButtons(user_favourites: list, page: int = 0):
    user_favourites.reverse()
    text = '–°–ø–∏—Å–æ–∫ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è:\n\n'

    keyboard = []

    if len(user_favourites) > 0:
        paints_after = len(user_favourites) - 5 * page
        for i in range(5 * page, 5 * page + min(paints_after, 5)):
            paint_data = json_loader.getPaintingData(user_favourites[i])
            text += f'{(i - 5 * page + 1) % 6}. *{paint_data["name"]}*\n–ê–≤—Ç–æ—Ä: *{paint_data["author"]}*\n\n'

        first_row_len = 1
        pg_amount = (len(user_favourites) // 5)
        # checking if we need pagination
        if len(user_favourites) > 5:
            if page < pg_amount:
                keyboard.append([
                    InlineKeyboardButton('>> –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ >>',
                                         callback_data=f'next_pg_{page+1}')
                ])
            if page > 0:
                keyboard.append([
                    InlineKeyboardButton('<< –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ <<',
                                         callback_data=f'next_pg_{page-1}')
                ])
            text += f'(–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1} –∏–∑ {len(user_favourites) // 5 + 1})'

        if 2 <= paints_after <= 4:
            first_row_len = 2
        elif paints_after >= 5:
            first_row_len = 3

        first_row = []
        for i in range(first_row_len):
            first_row.append(InlineKeyboardButton(
                f'üèû {str(i + 1)}', callback_data=f'pnt_btn_{user_favourites[page * 5 + i]}'))
        keyboard.append(first_row)

        second_row = []
        for i in range((min(paints_after, 5) - first_row_len)):
            second_row.append(InlineKeyboardButton(f'üèû {str(first_row_len + i + 1)}',
                                                   callback_data=f'pnt_btn_{user_favourites[page * 5 + first_row_len + i]}'))
        if len(second_row) > 0:
            keyboard.append(second_row)

    else:
        text += '–£–ø—Å, —Ç—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ—Ç...–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç–∏–Ω—ã, —Ç–æ–≥–¥–∞ —Å–º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ'

    keyboard.append([InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data='close_fav')])

    return text, InlineKeyboardMarkup(keyboard)


def generateSettingsTextButtons(user_settings: dict, favourites_number: int):
    text = '‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: ' + \
        ('üîî –≤–∫–ª—é—á–µ–Ω—ã' if user_settings['recurringEnabled'] else 'üîï –≤—ã–∫–ª—é—á–µ–Ω—ã')
    if user_settings['recurringEnabled']:
        text += '\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å: ' + str(user_settings['recurringTimesPerDay'])

    text += '\n\n–ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –∫–∞—Ä—Ç–∏–Ω—ã: ' + str(favourites_number)

    keyboard = []
    if user_settings['recurringEnabled']:
        keyboard.append([
            InlineKeyboardButton('üîï –í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data='on_off_quizes'),
            InlineKeyboardButton('–ß–∞—Å—Ç–æ—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...', callback_data='change_freq')
        ])
    else:
        keyboard.append([
            InlineKeyboardButton('üîî –í–∫–ª—é—á–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data='on_off_quizes'),
        ])
    keyboard.append([
        InlineKeyboardButton('üóë –°–±—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è –∫–∞—Ä—Ç–∏–Ω', callback_data='reset_favs')
    ])

    return text, InlineKeyboardMarkup(keyboard)


def generatePaintingTextButtons(painting_id: int, user_id: int, full_text: bool = False,
                                raw_buttons: bool = False, quizStatus: str = 'none'):
    paint_data = json_loader.getPaintingData(painting_id)
    text = ''

    if quizStatus == 'True':
        text += 'üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n'
    elif quizStatus == 'False':
        text += 'üò£ –ù–µ–≤–µ—Ä–Ω–æ...\n\n'

    text += (f'*–ù–∞–∑–≤–∞–Ω–∏–µ:* {paint_data["name"]}\n' +
             f'*–ê–≤—Ç–æ—Ä:* {paint_data["author"]}\n' +
             f'*–ì–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è:* {paint_data["date"]}\n' +
             f'*–°—Ç—Ä–∞–Ω–∞*: {paint_data["country"]}\n')

    keyboard: list

    favourites = json_loader.getFavouritesData()
    if painting_id not in favourites[str(user_id)]:
        keyboard = [[InlineKeyboardButton(
            '‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
            callback_data=f'add_to_favourites, {painting_id}')]]
    else:
        keyboard = [[InlineKeyboardButton(
            'üíî –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö',
            callback_data=f'delete_from_favourites, {painting_id}')]]

    if 'text_info' in paint_data and len(text + f'\n\n{paint_data["text_info"]}') < 1024:
        if full_text:
            text += f'\n\n{paint_data["text_info"]}'
            keyboard.append([
                InlineKeyboardButton('üìú –°–≤–µ—Ä–Ω—É—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
                                     callback_data=f"{quizStatus} close_full_info_{painting_id}")
            ]
            )
        else:
            text += '...'
            keyboard.append([
                InlineKeyboardButton('üìú –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
                                     callback_data=f"{quizStatus} open_full_info_{painting_id}")
            ]
            )
    else:
        try:
            keyboard.append(
                [
                    InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', url=f'{paint_data["url"]}')
                ]
            )
        # handling possible exception if no url with more info was found
        except Exception as e:
            pass

    if quizStatus != 'none':
        keyboard.append([InlineKeyboardButton('üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å', callback_data="anotherQuestion")])

    return text, (InlineKeyboardMarkup(keyboard) if not raw_buttons else keyboard)
